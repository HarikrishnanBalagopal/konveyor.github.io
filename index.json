[{"uri":"http://konveyor.github.io/crane/","title":"Crane","tags":[],"description":"","content":"Crane is a tool that helps application owners migrate Kubernetes workloads and their state between clusters, remove environment-specific configuration and automate application deployments along the way. The work is spread among a few projects:\ncrane: The command line tool that brings the ability to migrate applications to the terminal. crane-lib: This is the brains behind crane actions and is responsible for transforming resources. crane-plugin-openshift: Plugin specifically tailored to managing the migration of OpenShift workloads. Also serves as an example of codifying knowledge/best-practices in a repeatable way. crane-plugins: Collection of plugins from the konveyor community based on our experience with Kube migrations. NOTE:\nAdditional plugins will be added as new “crane-plugin-” repos CLI commands and plugins are explained in depth in later part of the document, visit Usage to understand how crane works. Why crane is needed? Crane is the product of our team distilling several years of experience performing large-scale production Kubernetes migrations. These operations are large, complex, error-prone, and usually must be peformed under a limited window of time. Because of that challenge, its paramount that a migration tool be designed with transparency and ease-of-diagnostics in mind. Crane is designed to drive a migration via a pipeline of non-destructive tasks that dump their results to disk so the operation can be easily audited and versioned without ever impacting live workloads. The tasks are idempotent, meaning they can be run repeatedly and will output consistent results given the same inputs without side-effects on the system at large.\n"},{"uri":"http://konveyor.github.io/forklift/","title":"Forklift","tags":[],"description":"","content":"Chapter X Some Chapter title Lorem Ipsum.\n"},{"uri":"http://konveyor.github.io/tackle/","title":"Tackle","tags":[],"description":"","content":"Chapter X Some Chapter title Lorem Ipsum.\n"},{"uri":"http://konveyor.github.io/crane/tools/","title":"Tools","tags":[],"description":"","content":""},{"uri":"http://konveyor.github.io/crane/tools/gitopsintegration/","title":"Integrating GitOps","tags":[],"description":"","content":"Integrating Gitops All the crane commands are individual utilities, but when used together in sequence, they form a pipeline. Crane makes it easy to integrate a gitops that applies the patches/resources generated at the end of apply on the destination cluster. The resources generated at the end of the process (i.e export, transform, apply), can be pushed to a github repository, and a pipeline can be setup that deploys the resources on a cluster on every push.\n"},{"uri":"http://konveyor.github.io/crane/tools/customplugins/","title":"Developing custom plugins","tags":[],"description":"","content":"This document covers how to write a plugin binary using crane-lib. It requires:\n Go to the development environment setup. (Optionally, an overview of the crane toolkit.)  Create binary plugin for crane-lib as a simple Go program in the following format that will: Read an input from stdin. Call the Run function with the input object passed as unstructured. Print the return value of Run function on stdout.\npackage main import ( \u0026#34;fmt\u0026#34; jsonpatch \u0026#34;github.com/evanphx/json-patch\u0026#34; \u0026#34;github.com/konveyor/crane-lib/transform\u0026#34; \u0026#34;github.com/konveyor/crane-lib/transform/cli\u0026#34; ) func main() { fields := []transform.OptionalFields{ { FlagName: \u0026#34;my-flag\u0026#34;, Help: \u0026#34;What the flag does\u0026#34;, Example: \u0026#34;true\u0026#34;, }, } cli.RunAndExit(cli.NewCustomPlugin(\u0026#34;MyCustomPlugin\u0026#34;, \u0026#34;v1\u0026#34;, fields, Run)) } func Run(request transform.PluginRequest) (transform.PluginResponse, error) { // plugin writers need to write custom code here. resp := transform.PluginResponse{ Version: string(transform.V1), } // prepare the response return resp, nil } The json is passed in using stdin is a transform.PluginRequest which consists of an inline unstructured object and an optional Extras map containing additional flags. Without any Extras the format is identical to the json output from a kubectl get -o json call.\nWhen adding extra parameters, a map field “extras” is added at the top level (parallel to “apiVersion”, “kind”, etc.).\nVersion the plugin development output by passing in the JSOC object on stdin manually during development. For example, if the code above is compiled and run with the following json as input, the output will be {\u0026quot;version\u0026quot;: \u0026quot;v1\u0026quot;}.\n./my-plugin { \u0026#34;apiVersion\u0026#34;: \u0026#34;route.openshift.io/v1\u0026#34;, \u0026#34;kind\u0026#34;: \u0026#34;Route\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;annotations\u0026#34;: { \u0026#34;openshift.io/host.generated\u0026#34;: \u0026#34;true\u0026#34; }, \u0026#34;creationTimestamp\u0026#34;: \u0026#34;2021-06-10T04:11:21Z\u0026#34;, \u0026#34;managedFields\u0026#34;: [ { \u0026#34;apiVersion\u0026#34;: \u0026#34;route.openshift.io/v1\u0026#34;, \u0026#34;fieldsType\u0026#34;: \u0026#34;FieldsV1\u0026#34;, \u0026#34;fieldsV1\u0026#34;: { \u0026#34;f:spec\u0026#34;: { \u0026#34;f:path\u0026#34;: {}, \u0026#34;f:to\u0026#34;: { \u0026#34;f:kind\u0026#34;: {}, \u0026#34;f:name\u0026#34;: {}, \u0026#34;f:weight\u0026#34;: {} }, \u0026#34;f:wildcardPolicy\u0026#34;: {} } }, \u0026#34;manager\u0026#34;: \u0026#34;oc\u0026#34;, \u0026#34;operation\u0026#34;: \u0026#34;Update\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2021-06-10T04:11:21Z\u0026#34; }, { \u0026#34;apiVersion\u0026#34;: \u0026#34;route.openshift.io/v1\u0026#34;, \u0026#34;fieldsType\u0026#34;: \u0026#34;FieldsV1\u0026#34;, \u0026#34;fieldsV1\u0026#34;: { \u0026#34;f:status\u0026#34;: { \u0026#34;f:ingress\u0026#34;: {} } }, \u0026#34;manager\u0026#34;: \u0026#34;openshift-router\u0026#34;, \u0026#34;operation\u0026#34;: \u0026#34;Update\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;2021-06-10T04:11:21Z\u0026#34; } ], \u0026#34;name\u0026#34;: \u0026#34;mssql-app-route\u0026#34;, \u0026#34;namespace\u0026#34;: \u0026#34;mssql-persistent\u0026#34;, \u0026#34;resourceVersion\u0026#34;: \u0026#34;155816271\u0026#34;, \u0026#34;selfLink\u0026#34;: \u0026#34;/apis/route.openshift.io/v1/namespaces/mssql-persistent/routes/mssql-app-route\u0026#34;, \u0026#34;uid\u0026#34;: \u0026#34;42dca205-31bf-463d-b516-f84064523c2c\u0026#34; }, \u0026#34;spec\u0026#34;: { \u0026#34;host\u0026#34;: \u0026#34;mssql-app-route-mssql-persistent.apps.cluster-alpatel-aux-tools-444.alpatel-aux-tools-444.mg.dog8code.com\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;to\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;Service\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;mssql-app-service\u0026#34;, \u0026#34;weight\u0026#34;: 100 }, \u0026#34;wildcardPolicy\u0026#34;: \u0026#34;None\u0026#34; }, \u0026#34;status\u0026#34;: { \u0026#34;ingress\u0026#34;: [ { \u0026#34;conditions\u0026#34;: [ { \u0026#34;lastTransitionTime\u0026#34;: \u0026#34;2021-06-10T04:11:21Z\u0026#34;, \u0026#34;status\u0026#34;: \u0026#34;True\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;Admitted\u0026#34; } ], \u0026#34;host\u0026#34;: \u0026#34;mssql-app-route-mssql-persistent.apps.cluster-alpatel-aux-tools-444.alpatel-aux-tools-444.mg.dog8code.com\u0026#34;, \u0026#34;routerCanonicalHostname\u0026#34;: \u0026#34;apps.cluster-alpatel-aux-tools-444.alpatel-aux-tools-444.mg.dog8code.com\u0026#34;, \u0026#34;routerName\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;wildcardPolicy\u0026#34;: \u0026#34;None\u0026#34; } ] } } When the plugin is ready to be tested, put it in a directory and run with the crane cli command.\nMore accurate detail can be found [here] (https://github.com/konveyor/crane-lib/blob/main/transform/binary-plugin/README.md).\n"},{"uri":"http://konveyor.github.io/crane/tools/tunnelapi/","title":"Tunnel API","tags":[],"description":"","content":"Tunnel Api The tunnel-api sub-command can be used to access an on-premise cluster from a cloud cluster. The intention is to allow orchestrating migrations from on-premise clusters using MTC where access is not possible otherwise.\nTo provide access an openvpn client on the on-premise cluster will connect to a server running on the cloud cluster. The openvpn server is exposed to the client using a load balancer address on the cloud cluster.\nA service created on the cloud cluster is used to expose the on-premise clusters API to MTC running on the cloud cluster.\nRequirements  The system used to create the VPN tunnel must have access and be logged in to both clusters. It must be possible to create a load balancer on the cloud cluster. An available namespace on each cluster to run the tunnel in. This should not be created in advance,  Note: To connect multiple on-premise source clusters to your cloud cluster you should use a separate namespace for each.\napi-tunnel options  namespace: The namespace to launch the VPN tunnel in, defaults to openvpn destination-context: The cloud destination cluster context where the openvpn server will be launched. destination-image: The container image to use on the destination cluster. Defaults to quay.io/konveyor/openvpn:latest source-context: The on-premise source cluster context where the openvpn client will be launched. source-image: The container image to use on the source cluster. Defaults to quay.io/konveyor/openvpn:latest proxy-host: The hostname of an http-proxy to use on the source cluster for connecting to the destination cluster proxy-pass: The password for the http-proxy. If specified you must also specify a username or it will be ignored. proxy-port: The port the http-proxy is listening on. If no specified it will default to 3128 proxy-user: The username for the http-proxy. If specified you must also specify a password or it will be ignored.  Example\ncrane tunnel-api --namespace openvpn-311 \\ --destination-context openshift-migration/c131-e-us-east-containers-cloud-ibm-com/admin \\ --source-context default/192-168-122-171-nip-io:8443/admin \\ --source-image: my.registry.server:5000/konveyor/openvpn:latest \\ --proxy-host my.proxy.server \\ --proxy-port 3128 \\ --proxy-user foo \\ --proxy-pass bar MTC Configuration When configuring the source cluster in MTC the API URL takes the form of https://proxied-cluster.${namespace}.svc.cluster.local:8443.\nYou may also set the image registry for direct image migrations to proxied-cluster.${namespace}.svc.cluster.local:5000.\nReplace ${namespace} with either openvpn or the namespace you specified when running the command to set up the tunnel.\nDemo https://youtu.be/wrPVcZ4bP1M\nTroubleshooting It may take 3 to 5 minutes after the setup to complete for the load balancer address to become resolvable. During this time the client will be unable to connect and establish a connection and the tunnel will not function.\nDuring this time you can run oc get pods in the namespace you specified for setup, and monitor the logs of the openvpn container to see the connection establish.\nExample\noc logs -f -n openvpn-311 openvpn-7b66f65d48-79dbs -c openvpn "},{"uri":"http://konveyor.github.io/crane/tools/pluginmanager/","title":"Managing Plugins","tags":[],"description":"","content":"Plugin management A helper to manage plugins that gets consumed by transform command. This is an optional step rather a utility to get any needed plugins and add them to appropriate location to be consumed by transform command.\nList plugin utility List plugins allows user to discover all the available plugins, meaning that all the plugins that are compatible with current os/arch.\nExample crane plugin-manager list Listing from the repo default +-----------------+------------------+-------------------+ | NAME | SHORTDESCRIPTION | AVAILABLEVERSIONS | +-----------------+------------------+-------------------+ | OpenshiftPlugin | OpenshiftPlugin | v0.0.1 | +-----------------+------------------+-------------------+ Other valid execution examples crane plugin-manager --installed -p plugin-dir The above command lists all the installed plugins managed by plugin-manager.\ncrane plugin-manager --params -n foo The above command lists all the version of plugin foo with detailed information.\nAdd plugin utility Add any plugin to a plugin directory to be consumed by transform command.\nExample crane plugin-manager add foo --version 0.0.1 -p plugin-dir The above command downloads the binary of plugin foo versioned 0.0.1 from appropriate source and places it in plugin directory plugin-dir/managed (default is plugins).\nRemove plugin utility Remove any unwanted plugins that are not needed anymore to exempt them being consumed by transform command.\nExample crane plugin-manager remove foo -p plugin-dir The above command will remove the plugin foo from the path plugin-dir/managed.\nNote: The plugin-manager command always operates in the path \u0026lt;plugin-dir\u0026gt;/managed, meaning whenever the flag -p, plugin-dir is used with plugin-manager the utility always operates within a folder managed places within \u0026lt;plugin-dir\u0026gt;. I.e plugin-manager add places the plugin binary within \u0026lt;plugin-dir\u0026gt;/managed, plugin-manager remove removes the binary from \u0026lt;plugin-dir\u0026gt;/managed, and plugin-manager list --installed looks at the path \u0026lt;plugin-dir\u0026gt;/managed to list installed plugins.\nManual plugin management Right now there are only two plugins available, there might be more plugins available soon. Currently available plugins are Kubernetes (build into crane-lib) and OpenShift. With the exception of the kubernetes plugin, which doesn’t need to be installed as it’s built in, these plugins can be added to desired plugin directory (default is plugin directory where crane is installed) by following methods -\nDownload the binary of the plugin from release and place it in plugin directory\ncurl -sL https://api.github.com/repos/konveyor/crane-plugin-\u0026lt;plugin-name\u0026gt;/releases/latest | jq -r \u0026#34;.assets[] | select(.name | contains(\\\u0026#34;\u0026lt;arch\u0026gt;-\u0026lt;os\u0026gt;\\\u0026#34;)) | .browser_download_url\u0026#34; | wget -i- chmod +x \u0026lt;binary\u0026gt; cp \u0026lt;binary\u0026gt; /bin/usr/crane/plugins/\u0026lt;plugin-name\u0026gt; Build the binary locally and place it in plugin directory\ncd $GOPATH git clone https://github.com/konveyor/crane-plugin-\u0026lt;plugin-name\u0026gt;.git cd crane-plugin-\u0026lt;plugin-name\u0026gt; go build -f \u0026lt;plugin-name\u0026gt; . cp \u0026lt;plugin\u0026gt; /bin/usr/crane/plugins/\u0026lt;plugin-name\u0026gt; Note: Adding plugins manually that are available in the plugin repo is not advisable as long as it can be added with the help of plugin-manager. For custom plugins or testing plugins under development, however, manual management is necessary.\nNote: Kubernetes plugin is always baked in crane-lib and is not supposed to be added manually or otherwise.\n"},{"uri":"http://konveyor.github.io/crane/installation/","title":"Installing Crane","tags":[],"description":"","content":"Follow the procedure below to install the Crane tool.\n1. Install the Crane binary. Enter the following command to install the latest version of Crane binary.\ncurl -sL https://api.github.com/repos/konveyor/crane/releases/latest | jq -r \u0026#34;.assets[] | select(.name | contains(\\\u0026#34;\u0026lt;arch\u0026gt;-\u0026lt;os\u0026gt;\\\u0026#34;)) | .browser_download_url\u0026#34; | wget -i- chmod +x \u0026lt;binary\u0026gt; cp \u0026lt;binary\u0026gt; /usr/bin/crane Crane currently supports three architectures:\n amd64-linux amd64-darwin arm64-darwin  Run the following command to download the latest version of Crane for amd64-linux.\ncurl -sL https://api.github.com/repos/konveyor/crane/releases/latest | jq -r \u0026#34;.assets[] | select(.name | contains(\\\u0026#34;amd64-linux\\\u0026#34;)) | .browser_download_url\u0026#34; | wget -i- Run the following command to download the latest version of Crane for amd64-darwin.\ncurl -sL https://api.github.com/repos/konveyor/crane/releases/latest | jq -r \u0026#34;.assets[] | select(.name | contains(\\\u0026#34;amd64-darwin\\\u0026#34;)) | .browser_download_url\u0026#34; | wget -i- Run the following command to download the latest version of Crane for arm64-darwin.\ncurl -sL https://api.github.com/repos/konveyor/crane/releases/latest | jq -r \u0026#34;.assets[] | select(.name | contains(\\\u0026#34;arm64-darwin\\\u0026#34;)) | .browser_download_url\u0026#34; | wget -i- 2. Install the most recent version of Crane from the upstream main branch. GOPATHshould be configured to build the project.\ncd $GOPATH git clone https://github.com/konveyor/crane.git cd crane go build -o crane main.go cp crane /usr/bin/crane Note: Install the released version instead of building from upstream main.\n"},{"uri":"http://konveyor.github.io/","title":"Konveyor Documentation","tags":[],"description":"","content":"Konveyor Documentation Content\n"},{"uri":"http://konveyor.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"http://konveyor.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]