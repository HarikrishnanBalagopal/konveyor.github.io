<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konveyor Documentation on Documentation for Konveyor projects</title><link>http://konveyor.github.io/</link><description>Recent content in Konveyor Documentation on Documentation for Konveyor projects</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Apr 2022 14:58:17 -0600</lastBuildDate><atom:link href="http://konveyor.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Step One: Export</title><link>http://konveyor.github.io/crane/usingcrane/step1export/</link><pubDate>Fri, 22 Apr 2022 10:29:18 -0600</pubDate><guid>http://konveyor.github.io/crane/usingcrane/step1export/</guid><description>The first step of the cluster migration process is exporting resources from a source cluster of any namespace to be input for the subsequent commands.
All of the following export commands will output the contents of the foo namespace into a local export directory with the context demo defined in KUBECONFIG.
crane export -n foo -e export --context demo cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; conf.yaml namespace: foo export-dir: export context: demo EOF crane export -c conf.</description></item><item><title>Step Two: Transform</title><link>http://konveyor.github.io/crane/usingcrane/step2transform/</link><pubDate>Fri, 22 Apr 2022 10:29:06 -0600</pubDate><guid>http://konveyor.github.io/crane/usingcrane/step2transform/</guid><description>The Transform command facilitates the changes to the exported resources that are frequently necessary when migrating workloads between one environment to another. For example:
Stripping the resource status information that is no longer relevant after the resource is serialized out of a cluster. Adjusting resource quotas to fit the destination environment. Altering node selectors to match the new environment if the node labels do not match the source environment. Applying custom labels or annotations to resources during the migration.</description></item><item><title>Overview</title><link>http://konveyor.github.io/crane/overview/</link><pubDate>Fri, 22 Apr 2022 08:36:14 -0600</pubDate><guid>http://konveyor.github.io/crane/overview/</guid><description>Crane is a tool that helps application owners migrate Kubernetes workloads and their state between clusters, remove environment-specific configuration, and automate application deployments along the way.
The process uses a few tools:
crane: The command line tool that migrates applications to the terminal. crane-lib: The brains behind Crane functionality responsible for transforming resources. crane-plugin-openshift: Plugin specifically tailored to manage OpenShift migration workloads and an example of a repeatable best-practice. crane-plugins: Collection of plugins from the Konveyor community based on experience from performing Kube migrations.</description></item><item><title>Integrating GitOps</title><link>http://konveyor.github.io/crane/tools/gitopsintegration/</link><pubDate>Thu, 14 Apr 2022 15:22:46 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/gitopsintegration/</guid><description>All Crane commands are individual utilities, but when used together in sequence, they form a pipeline.
Crane makes it easy to integrate a gitops that applies the patches/resources generated at the end of the apply command on the destination cluster. The resources generated at the end of the process (i.e export, transform, apply) can be pushed to a github repository, and a pipeline can be created to deploy the resources on a cluster on every push.</description></item><item><title>Developing custom plugins</title><link>http://konveyor.github.io/crane/tools/customplugins/</link><pubDate>Thu, 14 Apr 2022 15:22:29 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/customplugins/</guid><description>This document covers how to write a plugin binary using crane-lib. It requires:
Go to the development environment setup. (Optionally, an overview of the crane toolkit.)
Create binary plugin for crane-lib as a simple Go program in the following format that will:
Read an input from stdin. Call the Run function with the input object passed as unstructured. Print the return value of Run function on stdout.</description></item><item><title>Tunnel API</title><link>http://konveyor.github.io/crane/tools/tunnelapi/</link><pubDate>Thu, 14 Apr 2022 15:21:57 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/tunnelapi/</guid><description>The tunnel-api sub-command can be used to access an on-premise cluster from a cloud cluster to allow orchestrating migrations from on-premise clusters using MTC where access is not possible otherwise.
An openvpn client on the on-premise cluster will connect to a server running on the cloud cluster and the openvpn server is exposed to the client using a load balancer address on the cloud cluster.
A service created on the cloud cluster is used to expose the on-premise clusters API to MTC running on the cloud cluster.</description></item><item><title>Plugin Manager</title><link>http://konveyor.github.io/crane/tools/pluginmanager/</link><pubDate>Thu, 14 Apr 2022 15:19:04 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/pluginmanager/</guid><description>The Plugin Manager is an optional utility that assists in adding plugins to the appropriate location to be consumed by the transform command.
List Plugin utility The List Plugin utility discovers available plugins that that are compatible with the current OS and architecture.
crane plugin-manager list Listing from the repo default +-----------------+------------------+-------------------+ | NAME | SHORTDESCRIPTION | AVAILABLEVERSIONS | +-----------------+------------------+-------------------+ | OpenshiftPlugin | OpenshiftPlugin | v0.0.1 | +-----------------+------------------+-------------------+ Other valid execution examples This command lists all installed plugins managed by plugin-manager.</description></item><item><title>Tutorial: Stateless application mirror</title><link>http://konveyor.github.io/crane/tutorials/statelessappmirror/</link><pubDate>Thu, 14 Apr 2022 15:18:35 -0600</pubDate><guid>http://konveyor.github.io/crane/tutorials/statelessappmirror/</guid><description>This tutorial demonstrates how to mirror a simple, stateless PHP Guestbook application using Crane.
Roadmap
1. Deploy the Guestbook application in the source cluster. 2. Extract resources from the source cluster using Crane Export. 3. Transform resources to prepare manifests for the destination cluster using Crane Transform. 4. Apply the transformations using Crane Apply. Apply application manifests to the destination cluster. Prerequisites Create a source and destination Kubernetes cluster environment in minikube or Kind: minikube</description></item><item><title>Installing Crane</title><link>http://konveyor.github.io/crane/installation/</link><pubDate>Thu, 14 Apr 2022 15:17:07 -0600</pubDate><guid>http://konveyor.github.io/crane/installation/</guid><description>Follow the procedure below to install the Crane tool.
1. Install the Crane binary. Enter the following command to install the latest version of Crane binary.
curl -sL https://api.github.com/repos/konveyor/crane/releases/latest | jq -r &amp;#34;.assets[] | select(.name | contains(\&amp;#34;&amp;lt;arch&amp;gt;-&amp;lt;os&amp;gt;\&amp;#34;)) | .browser_download_url&amp;#34; | wget -i- chmod +x &amp;lt;binary&amp;gt; cp &amp;lt;binary&amp;gt; /usr/bin/crane Crane currently supports three architectures:
amd64-linux amd64-darwin arm64-darwin Run the following command to download the latest version of Crane for amd64-linux.</description></item><item><title>Tutorial: Migrating a Kubernetes cluster</title><link>http://konveyor.github.io/crane/tutorials/migratek8cluster/</link><pubDate>Thu, 14 Apr 2022 15:14:19 -0600</pubDate><guid>http://konveyor.github.io/crane/tutorials/migratek8cluster/</guid><description>Migrating a Kubernetes cluster This tutorial follows a demo showing how to use the Konveyor tool Crane to migrate an application (inventory) from the source Kubernetes cluster (src) to the destination cluster (dest).
Refer to the Crane Documentation for more detailed information.
Note: In addition to migrating with Crane, it is helpful to push the application to git so it can be automatically deployed to any cluster in the future. This demo includes those steps.</description></item></channel></rss>