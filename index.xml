<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konveyor Documentation on Documentation for Konveyor projects</title><link>http://konveyor.github.io/</link><description>Recent content in Konveyor Documentation on Documentation for Konveyor projects</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Apr 2022 14:58:17 -0600</lastBuildDate><atom:link href="http://konveyor.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Integrating GitOps</title><link>http://konveyor.github.io/crane/tools/gitopsintegration/</link><pubDate>Thu, 14 Apr 2022 15:22:46 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/gitopsintegration/</guid><description>Integrating Gitops All the crane commands are individual utilities, but when used together in sequence, they form a pipeline. Crane makes it easy to integrate a gitops that applies the patches/resources generated at the end of apply on the destination cluster. The resources generated at the end of the process (i.e export, transform, apply), can be pushed to a github repository, and a pipeline can be setup that deploys the resources on a cluster on every push.</description></item><item><title>Developing custom plugins</title><link>http://konveyor.github.io/crane/tools/customplugins/</link><pubDate>Thu, 14 Apr 2022 15:22:29 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/customplugins/</guid><description>This document covers how to write a plugin binary using crane-lib. It requires:
Go to the development environment setup. (Optionally, an overview of the crane toolkit.) Create binary plugin for crane-lib as a simple Go program in the following format that will: Read an input from stdin. Call the Run function with the input object passed as unstructured. Print the return value of Run function on stdout.
package main import ( &amp;#34;fmt&amp;#34; jsonpatch &amp;#34;github.</description></item><item><title>Tunnel API</title><link>http://konveyor.github.io/crane/tools/tunnelapi/</link><pubDate>Thu, 14 Apr 2022 15:21:57 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/tunnelapi/</guid><description>Tunnel Api The tunnel-api sub-command can be used to access an on-premise cluster from a cloud cluster. The intention is to allow orchestrating migrations from on-premise clusters using MTC where access is not possible otherwise.
To provide access an openvpn client on the on-premise cluster will connect to a server running on the cloud cluster. The openvpn server is exposed to the client using a load balancer address on the cloud cluster.</description></item><item><title>Managing Plugins</title><link>http://konveyor.github.io/crane/tools/pluginmanager/</link><pubDate>Thu, 14 Apr 2022 15:19:04 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/pluginmanager/</guid><description>Plugin management A helper to manage plugins that gets consumed by transform command. This is an optional step rather a utility to get any needed plugins and add them to appropriate location to be consumed by transform command.
List plugin utility List plugins allows user to discover all the available plugins, meaning that all the plugins that are compatible with current os/arch.
Example crane plugin-manager list Listing from the repo default +-----------------+------------------+-------------------+ | NAME | SHORTDESCRIPTION | AVAILABLEVERSIONS | +-----------------+------------------+-------------------+ | OpenshiftPlugin | OpenshiftPlugin | v0.</description></item><item><title>Tutorial: Stateless application mirror</title><link>http://konveyor.github.io/crane/tutorials/statelessappmirror/</link><pubDate>Thu, 14 Apr 2022 15:18:35 -0600</pubDate><guid>http://konveyor.github.io/crane/tutorials/statelessappmirror/</guid><description>This tutorial demonstrates how to mirror a simple, stateless PHP Guestbook application using Crane.
Roadmap
Deploy the Guestbook application in the source cluster. Extract resources from the source cluster using Crane Export. Generate transformations to prepare manifests for the destination cluster using Crane Transform. Apply the transformations using Crane Apply. Apply application manifests into the destination cluster. Prerequisites Create a source and destination Kubernetes cluster environment in minikube or Kind:</description></item><item><title>Installing Crane</title><link>http://konveyor.github.io/crane/installation/</link><pubDate>Thu, 14 Apr 2022 15:17:07 -0600</pubDate><guid>http://konveyor.github.io/crane/installation/</guid><description>Follow the procedure below to install the Crane tool.
1. Install the Crane binary. Enter the following command to install the latest version of Crane binary.
curl -sL https://api.github.com/repos/konveyor/crane/releases/latest | jq -r &amp;#34;.assets[] | select(.name | contains(\&amp;#34;&amp;lt;arch&amp;gt;-&amp;lt;os&amp;gt;\&amp;#34;)) | .browser_download_url&amp;#34; | wget -i- chmod +x &amp;lt;binary&amp;gt; cp &amp;lt;binary&amp;gt; /usr/bin/crane Crane currently supports three architectures:
amd64-linux amd64-darwin arm64-darwin Run the following command to download the latest version of Crane for amd64-linux.</description></item><item><title>Tutorial: Migrating a Kubernetes cluster</title><link>http://konveyor.github.io/crane/tutorials/migratek8cluster/</link><pubDate>Thu, 14 Apr 2022 15:14:19 -0600</pubDate><guid>http://konveyor.github.io/crane/tutorials/migratek8cluster/</guid><description>Migrating a Kubernetes cluster This tutorial follows a demo showing how to use the Konveyor tool Crane to migrate an application (inventory) from the source Kubernetes cluster (src) to the destination cluster (dest).
Refer to the Crane Documentation for more detailed information.
Note: In addition to migrating with Crane, it is helpful to push the application to git so it can be automatically deployed to any cluster in the future. This demo includes those steps.</description></item></channel></rss>