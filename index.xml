<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Konveyor Documentation on Documentation for Konveyor projects</title><link>http://konveyor.github.io/</link><description>Recent content in Konveyor Documentation on Documentation for Konveyor projects</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Apr 2022 14:58:17 -0600</lastBuildDate><atom:link href="http://konveyor.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Tackle Overview</title><link>http://konveyor.github.io/tackle/overview/</link><pubDate>Fri, 06 May 2022 10:44:14 -0600</pubDate><guid>http://konveyor.github.io/tackle/overview/</guid><description>Tackle is a collection of tools that support the modernization and migration of applications to Kubernetes. These tools assess applications to determine which option is the appropriate migration strategy for each application:
Rehosting Replatforming Refactoring Tackle uses an interactive questionnaire for the assessment which enables key stakeholders to gather information about applications, discuss risks flagged by Tackle, and reach a consensus in formulating recommendations for each application.
Tackle Refactoring Tools The tools are cloud-native micro-services that are accessible from a common Tackle UI.</description></item><item><title>Upgrading Tackle</title><link>http://konveyor.github.io/tackle/upgrade/</link><pubDate>Thu, 05 May 2022 18:47:38 -0600</pubDate><guid>http://konveyor.github.io/tackle/upgrade/</guid><description>Tackle application instances are upgraded manually.
Upgrading from version 1.1.0 to 1.2.0 Follow the steps below to manually upgrade an instance of the Tackle application from 1.1.0 to 1.2.0.
Prerequisites
Project administrator privileges.
Procedure
Specify the namespace and the Tackle instance name for each step.
Update the Keycloak deployment of the Tackle instance: $ kubectl set image -n &amp;lt;namespace&amp;gt; deployment/&amp;lt;tackle_instance&amp;gt;-keycloak keycloak-theme=quay.io/konveyor/tackle-keycloak-init:1.2.0 Update the application-inventory-rest deployment: $ kubectl set image -n &amp;lt;namespace&amp;gt; deployment/&amp;lt;tackle_instance&amp;gt;-application-inventory-rest \ &amp;lt;tackle_instance&amp;gt;-application-inventory-rest=quay.</description></item><item><title>Web Console Services</title><link>http://konveyor.github.io/tackle/webconsolesvcs/</link><pubDate>Thu, 05 May 2022 17:16:42 -0600</pubDate><guid>http://konveyor.github.io/tackle/webconsolesvcs/</guid><description>Tackle web console provides the following services:
Application inventory Assessments Reviews Reports Controls Application inventory The Application inventory page enables you to perform the following tasks:
Manage your application portfolio. Define and manage application dependencies. Link applications to the business services that they support. Describe and categorize applications by using tags. Assessments The applications are assessed on the Application inventory page which helps determine the appropriate migration strategy for each application:</description></item><item><title>Managing users and credentials</title><link>http://konveyor.github.io/tackle/manageusers/</link><pubDate>Thu, 05 May 2022 16:40:47 -0600</pubDate><guid>http://konveyor.github.io/tackle/manageusers/</guid><description>Follow the procedures in this section to manage Tackle users and passwords using the Keycloak admin console.
Accessing the Keycloak admin console A Keycloak admin user is created when Tackle is installed. The admin username and password are needed to log in to the Keycloak admin console. The credentials are stored in the tackle-keycloak secret.
Prerequisites Cluster-admin privileges.
Procedure Run the following command to obtain the admin credentials: $ kubectl get secret tackle-keycloak -o go-template=&amp;#39;{{range $k,$v := .</description></item><item><title>Managing assessments</title><link>http://konveyor.github.io/tackle/manageassess/</link><pubDate>Thu, 05 May 2022 15:15:05 -0600</pubDate><guid>http://konveyor.github.io/tackle/manageassess/</guid><description>Start, edit, review, and delete application assessments in the Application inventory page of the Tackle web console.
Starting an assessment Follow the steps below to start an application assessment on the Application inventory page of the Tackle web console.
Procedure Start the Tackle web console Click Application Inventory. Select an application that does not have a Completed assessment status and click the Assess button in the toolbar. Select individual stakeholders or stakeholder groups and then click Next.</description></item><item><title>Managing applications</title><link>http://konveyor.github.io/tackle/manageapps/</link><pubDate>Thu, 05 May 2022 10:51:42 -0600</pubDate><guid>http://konveyor.github.io/tackle/manageapps/</guid><description>title: &amp;ldquo;Managing Applications&amp;rdquo; date: 2022-05-04T17:02:46-06:00 draft: true Follow the procedures in this section to create, import, tag, and modify your applications in the Application inventory page of the Tackle web console.
Creating an application Follow the steps below to create an application on the Application inventory page of the Tackle web console.
Procedure Open the Tackle web console. Click Application inventory and then Create New. Complete the following fields: Name: Name of the application.</description></item><item><title>Additional tools</title><link>http://konveyor.github.io/tackle/additionaltools/</link><pubDate>Tue, 03 May 2022 11:01:08 -0600</pubDate><guid>http://konveyor.github.io/tackle/additionaltools/</guid><description>DIVA Tackle DiVA is a data-centric application analysis tool that imports a set of target application source files and provides database/transaction analysis results.
Test Generator Tackle Test Generator is an automatic test-generation and differential-testing tool that currently supports unit-level test generation for Java applications. (Future project plans include adding capabilities for automated generation of end-to-end UI/UX test cases for web applications and test cases for REST APIs.)
Container Advisor Tackle Container Advisor provides containerization advisory information for a large scale application portfolio.</description></item><item><title>Installing Tackle</title><link>http://konveyor.github.io/tackle/installation/</link><pubDate>Tue, 03 May 2022 11:00:46 -0600</pubDate><guid>http://konveyor.github.io/tackle/installation/</guid><description>Follow the procedures in this section to install Tackle.
Installing the Tackle Operator Follow the steps below to download and install the Tackle Operator on an Enterprise Kubernetes Platform cluster.
Prerequisites Cluster-admin privileges. Procedure Install the Tackle Operator: $ kubectl create -f https://operatorhub.io/install/tackle-operator.yaml The Tackle Operator is installed in the my-tackle-operator namespace by default.
Verify the Tackle Operator installation by viewing its resources: $ kubectl get all -n my-tackle-operator Installing the Tackle application Follow the steps below to install Tackle in a namespace by creating an instance of the Tackle application.</description></item><item><title>Step One: Export</title><link>http://konveyor.github.io/crane/usingcrane/step1export/</link><pubDate>Fri, 22 Apr 2022 10:29:18 -0600</pubDate><guid>http://konveyor.github.io/crane/usingcrane/step1export/</guid><description>The first step of the cluster migration process is exporting resources from a source cluster of any namespace to be input for the subsequent commands.
All of the following export commands will output the contents of the foo namespace into a local export directory with the context demo defined in KUBECONFIG.
crane export -n foo -e export --context demo cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; conf.yaml namespace: foo export-dir: export context: demo EOF crane export -c conf.</description></item><item><title>Step Two: Transform</title><link>http://konveyor.github.io/crane/usingcrane/step2transform/</link><pubDate>Fri, 22 Apr 2022 10:29:06 -0600</pubDate><guid>http://konveyor.github.io/crane/usingcrane/step2transform/</guid><description>The Transform command facilitates the changes to the exported resources that are frequently necessary when migrating workloads between one environment to another. For example:
Stripping the resource status information that is no longer relevant after the resource is serialized out of a cluster. Adjusting resource quotas to fit the destination environment. Altering node selectors to match the new environment if the node labels do not match the source environment. Applying custom labels or annotations to resources during the migration.</description></item><item><title>Step Three: Apply</title><link>http://konveyor.github.io/crane/usingcrane/step3apply/</link><pubDate>Fri, 22 Apr 2022 10:28:43 -0600</pubDate><guid>http://konveyor.github.io/crane/usingcrane/step3apply/</guid><description>The final step of the cluster migration process is to apply all the patches generated by the Transform command to exported resources.
crane apply -e export -t transform -o output Apply the patches in the transform directory to the resources in the export directory and save the modified resource files in the output directory.
After applying the patches, the resources located in output directory can either be deployed to the destination cluster using kubectl apply, or they can be pushed to a repository and then applied with the help of the GitOps pipeline.</description></item><item><title>Crane overview</title><link>http://konveyor.github.io/crane/overview/</link><pubDate>Fri, 22 Apr 2022 08:36:14 -0600</pubDate><guid>http://konveyor.github.io/crane/overview/</guid><description>Crane is a tool that helps application owners migrate Kubernetes workloads and their state between clusters, remove environment-specific configuration, and automate application deployments along the way.
The process uses a few tools:
crane: The command line tool that migrates applications to the terminal. crane-lib: The brains behind Crane functionality responsible for transforming resources. crane-plugin-openshift: Plugin specifically tailored to manage OpenShift migration workloads and an example of a repeatable best-practice. crane-plugins: Collection of plugins from the Konveyor community based on experience from performing Kube migrations.</description></item><item><title>Integrating GitOps</title><link>http://konveyor.github.io/crane/tools/gitopsintegration/</link><pubDate>Thu, 14 Apr 2022 15:22:46 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/gitopsintegration/</guid><description>All Crane commands are individual utilities, but when used together in sequence, they form a pipeline.
Crane makes it easy to integrate a gitops that applies the patches/resources generated at the end of the apply command on the destination cluster. The resources generated at the end of the process (i.e export, transform, apply) can be pushed to a github repository, and a pipeline can be created to deploy the resources on a cluster on every push.</description></item><item><title>Developing custom plugins</title><link>http://konveyor.github.io/crane/tools/customplugins/</link><pubDate>Thu, 14 Apr 2022 15:22:29 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/customplugins/</guid><description>This document covers how to write a plugin binary using crane-lib. It requires:
Go to the development environment setup. (Optionally, an overview of the crane toolkit.)
Create binary plugin for crane-lib as a simple Go program in the following format that will:
Read an input from stdin. Call the Run function with the input object passed as unstructured. Print the return value of Run function on stdout.</description></item><item><title>Tunnel API</title><link>http://konveyor.github.io/crane/tools/tunnelapi/</link><pubDate>Thu, 14 Apr 2022 15:21:57 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/tunnelapi/</guid><description>The tunnel-api sub-command can be used to access an on-premise cluster from a cloud cluster to allow orchestrating migrations from on-premise clusters using MTC where access is not possible otherwise.
An openvpn client on the on-premise cluster will connect to a server running on the cloud cluster and the openvpn server is exposed to the client using a load balancer address on the cloud cluster.
A service created on the cloud cluster is used to expose the on-premise clusters API to MTC running on the cloud cluster.</description></item><item><title>Plugin Manager</title><link>http://konveyor.github.io/crane/tools/pluginmanager/</link><pubDate>Thu, 14 Apr 2022 15:19:04 -0600</pubDate><guid>http://konveyor.github.io/crane/tools/pluginmanager/</guid><description>The Plugin Manager is an optional utility that assists in adding plugins to the appropriate location to be consumed by the transform command.
List Plugin utility The List Plugin utility discovers available plugins that that are compatible with the current OS and architecture.
crane plugin-manager list Listing from the repo default +-----------------+------------------+-------------------+ | NAME | SHORTDESCRIPTION | AVAILABLEVERSIONS | +-----------------+------------------+-------------------+ | OpenshiftPlugin | OpenshiftPlugin | v0.0.1 | +-----------------+------------------+-------------------+ Other valid execution examples This command lists all installed plugins managed by plugin-manager.</description></item><item><title>Tutorial: Stateless application mirror</title><link>http://konveyor.github.io/crane/tutorials/statelessappmirror/</link><pubDate>Thu, 14 Apr 2022 15:18:35 -0600</pubDate><guid>http://konveyor.github.io/crane/tutorials/statelessappmirror/</guid><description>This tutorial demonstrates how to mirror a simple, stateless PHP Guestbook application using Crane.
Roadmap
1. Deploy the Guestbook application in the source cluster. 2. Extract resources from the source cluster using Crane Export. 3. Transform resources to prepare manifests for the destination cluster using Crane Transform. 4. Apply the transformations using Crane Apply. Apply application manifests to the destination cluster. Prerequisites Create a source and destination Kubernetes cluster environment in minikube or Kind: minikube</description></item><item><title>Installing Crane</title><link>http://konveyor.github.io/crane/installation/</link><pubDate>Thu, 14 Apr 2022 15:17:07 -0600</pubDate><guid>http://konveyor.github.io/crane/installation/</guid><description>Follow the procedure below to install the Crane tool.
1. Install the Crane binary. Enter the following command to install the latest version of Crane binary.
curl -sL https://api.github.com/repos/konveyor/crane/releases/latest | jq -r &amp;#34;.assets[] | select(.name | contains(\&amp;#34;&amp;lt;arch&amp;gt;-&amp;lt;os&amp;gt;\&amp;#34;)) | .browser_download_url&amp;#34; | wget -i- chmod +x &amp;lt;binary&amp;gt; cp &amp;lt;binary&amp;gt; /usr/bin/crane Crane currently supports three architectures:
amd64-linux amd64-darwin arm64-darwin Run the following command to download the latest version of Crane for amd64-linux.</description></item><item><title>Tutorial: Migrating a Kubernetes cluster</title><link>http://konveyor.github.io/crane/tutorials/migratek8cluster/</link><pubDate>Thu, 14 Apr 2022 15:14:19 -0600</pubDate><guid>http://konveyor.github.io/crane/tutorials/migratek8cluster/</guid><description>Migrating a Kubernetes cluster This tutorial follows a demo showing how to use the Konveyor tool Crane to migrate an application (inventory) from the source Kubernetes cluster (src) to the destination cluster (dest).
Refer to the Crane Documentation for more detailed information.
Note: In addition to migrating with Crane, it is helpful to push the application to git so it can be automatically deployed to any cluster in the future. This demo includes those steps.</description></item></channel></rss>